"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getText = void 0;
function getAllSwears() {
    return [
        ["tabarnak", "tabarnouche", "tabarouette", "taboire", "tabarslaque", "tabarnane"],
        ["c\u00E2lisse", "c\u00E2lique", "c\u00E2line", "c\u00E2line de bine", "c\u00E2liboire", "caltor"],
        ["crisse", "christie", "crime", "bout d'crisse"],
        ["ostie", "astie", "estique", "ostifie", "esprit"],
        ["ciboire", "saint-ciboire"],
        ["torrieux", "torvisse"],
        ["cimonaque", "saint-cimonaque"],
        ["bapt\u00EAme", "batince", "bat\u00E8che"],
        ["b\u00E2tard"],
        ["calvaire", "calvince", "calvinouche"],
        ["mosus"],
        ["maudit", "mautadit", "maudine", "mautadine"],
        ["sacrament", "sacr\u00E9fice", "saint-sacrament"],
        ["viarge", "sainte-viarge", "bout d'viarge"],
        ["ciarge", "saint-ciarge", "bout d'ciarge"],
        ["cibouleau"],
        ["cibole", "cibolac"],
        ["enfant d'chienne"],
        ["verrat"],
        ["marde", "maudite marde", "mangeux d'marde"],
        ["boswell"],
        ["sacristi", "sapristi"],
        ["J\u00E9sus de pl\u00E2tre", "J\u00E9sus Marie Joseph", "p'tit J\u00E9sus", "doux J\u00E9sus"],
        ["crucifix"],
        ["patente \u00E0 gosse", "cochonnerie", "cossin"],
        ["viande \u00E0 chien"],
        ["cul", "saintes fesses"],
        ["pur\u00E9e"],
        ["\u00E9tole"],
        ["charogne", "charrue"],
        ["g\u00E9riboire", "g\u00E9ritole"],
        ["colon"],
    ];
}
/**
 * Generates a chain of Québécois obscenities.
 * @param {number} [nbRequested] Optional number of swears to chain
 * @return {string}
 */
function getText(nbRequested) {
    nbRequested = nbRequested || (randomInt(4) + 6);
    var remaining = getAllSwears();
    var result = "";
    var previousSwear = "";
    var previousIndex = null;
    for (var i = 0; i < nbRequested; i++) {
        var family = void 0;
        var current = void 0;
        var currentIndex = void 0;
        // If we've run out of remaining swears or only the previous family remains, reinitialize remaining.
        if (!remaining.length || (remaining.length === 1 && previousIndex !== null)) {
            remaining = getAllSwears();
        }
        // Choose a random swear family that isn't the previous one.
        do {
            currentIndex = randomInt(remaining.length);
        } while (currentIndex === previousIndex || remaining[currentIndex].includes(previousSwear));
        family = remaining[currentIndex];
        previousIndex = currentIndex;
        // Choose a random swear, and delete the family if empty.
        current = family.splice(randomInt(family.length), 1)[0];
        previousSwear = current;
        if (!family.length) {
            remaining.splice(currentIndex, 1);
            previousIndex = null;
        }
        // Capitalize the fist swear, add an article prefix to others.
        result += (i === 0) ? capitalize(current) : withArticle(current);
        // Add a period after the last swear, a space after others.
        result += (i === nbRequested - 1) ? '.' : ' ';
    }
    return result;
}
exports.getText = getText;
var startsWithPrefix = /^(de\s|d')/;
var startsWithVowel = /^[aeiouhyAEIOUHYÀ-ÖØ-öø-ÿ]/;
function withArticle(str) {
    var prefix;
    if (startsWithPrefix.test(str)) {
        // If it already starts with `de` or `d'`, don't add another.
        prefix = '';
    }
    else if (startsWithVowel.test(str)) {
        // If it starts with a vowel, prepend with `d'`
        prefix = "d'";
    }
    else {
        // Otherwise prepend with `de`
        prefix = 'de ';
    }
    return "" + prefix + str;
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
function randomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}
